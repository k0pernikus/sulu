<?php
/*
 * This file is part of the Sulu CMS.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Bundle\CategoryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * Gets a category-entity by id
     * @param $id
     * @return mixed|null
     */
    public function findCategoryById($id)
    {
        try {
            $qb = $this->createQueryBuilder('category')
                ->leftJoin('category.meta', 'categoryMeta')
                ->leftJoin('category.translations', 'categoryTranslations')
                ->leftJoin('category.parent', 'categoryParent')
                ->leftJoin('category.children', 'categoryChildren')
                /*
                ->leftJoin('category.creator', 'creator')
                ->leftJoin('creator.contact', 'creatorContact')
                ->leftJoin('category.changer', 'changer')
                ->leftJoin('changer.contact', 'changerContact')
                */

                ->addSelect('category')
                ->addSelect('categoryMeta')
                ->addSelect('categoryTranslations')
                ->addSelect('categoryParent')
                ->addSelect('categoryChildren')
                /*
                ->addSelect('creator')
                ->addSelect('creatorContact')
                ->addSelect('changer')
                ->addSelect('changerContact')
                */

                ->where('category.id = :categoryId');

            $query = $qb->getQuery();
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
            $query->setParameter('categoryId', $id);

            return $query->getSingleResult();

        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * Returns all categories. Can be filtered with parent and depth
     * @param number $parent the id of the parent to filter for
     * @param number $depth the depth-level to filter for
     * @return mixed|null
     */
    public function findCategories($parent = null, $depth = null) {
        try {
            $qb = $this->createQueryBuilder('category')
                ->leftJoin('category.meta', 'categoryMeta')
                ->leftJoin('category.translations', 'categoryTranslations')
                ->leftJoin('category.parent', 'categoryParent')
                ->leftJoin('category.children', 'categoryChildren')
                /*
                ->leftJoin('category.creator', 'creator')
                ->leftJoin('creator.contact', 'creatorContact')
                ->leftJoin('category.changer', 'changer')
                ->leftJoin('changer.contact', 'changerContact')
                */

                ->addSelect('categoryMeta')
                ->addSelect('categoryTranslations')
                ->addSelect('categoryParent')
                ->addSelect('categoryChildren');
                /*
                ->addSelect('creator')
                ->addSelect('creatorContact')
                ->addSelect('changer')
                ->addSelect('changerContact');
                */

            if ($parent !== null) {
                $qb->andWhere('categoryParent.id = :parentId');
            }
            if ($depth !== null) {
                $qb->andWhere('category.depth = :depth');
            }

            $query = $qb->getQuery();
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
            if ($parent !== null) {
                $query->setParameter('parentId', $parent);
            }
            if ($depth !== null) {
                $query->setParameter('depth', $depth);
            }

            return $query->getResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }
}
